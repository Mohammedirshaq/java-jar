pipeline {
    agent any
    environment {
        SONARQUBE_URL = 'http://35.211.186.41:9000'
        SONARQUBE_TOKEN = credentials('sonar-token')
        SONAR_PROJECT_KEY = 'simple-java-maven-app'
        SONAR_PROJECT_NAME = 'Simple Java Maven App'
    }

    stages {
        stage('Create SonarQube Project') {
            steps {
                script {
                    sh """
                    curl -X POST -u admin:$SONARQUBE_TOKEN \
                    "$SONARQUBE_URL/api/projects/create?project=$SONAR_PROJECT_KEY&name=$SONAR_PROJECT_NAME"
                    """
                }
            }
        }

        stage('Build & Test') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                    mvn sonar:sonar \
                    -Dsonar.projectKey="$SONAR_PROJECT_KEY" \
                    -Dsonar.projectName="$SONAR_PROJECT_NAME" \
                    -Dsonar.host.url="$SONARQUBE_URL" \
                    -Dsonar.login="$SONARQUBE_TOKEN"
                    """
                }
            }
        }

        stage('Check Quality Gate') {
            steps {
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        def qualityGate = waitForQualityGate()
                        if (qualityGate.status != 'OK') {
                            error "❌ Quality Gate failed! Fix issues in SonarQube."
                        }
                    }
                }
            }
        }
/*
        stage('Docker Build & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    docker build -t java-jar-app .
                    docker tag java-jar-app $DOCKER_USER/java-jar-app:latest
                    docker login -u $DOCKER_USER -p $DOCKER_PASS
                    docker push $DOCKER_USER/java-jar-app:latest
                    '''
                }
            }
        }

        stage('Deploy (Optional)') {
            steps {
                sh 'docker run -d -p 8081:8081 mdirshaq/java-jar-app'
            }
        }
    }
*/
    post {
        success {
            echo '✅ Build and deployment successful!'
        }
        failure {
            echo '❌ Build failed. Check logs.'
        }
    }
}
}
